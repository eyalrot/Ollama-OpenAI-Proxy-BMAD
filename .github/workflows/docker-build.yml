name: Docker Build and Publish

on:
  push:
    branches: [master, main]
    tags:
      - 'v*'
  pull_request:
    branches: [master, main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build CI image and run tests
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: ci
        load: true
        tags: ${{ env.IMAGE_NAME }}:ci
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run tests in CI container
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Run linting
        docker run --rm ${{ env.IMAGE_NAME }}:ci ruff check src/ tests/
        
        # Run type checking
        docker run --rm ${{ env.IMAGE_NAME }}:ci mypy src/
        
        # Run tests with coverage
        docker run --rm \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          -e LOG_LEVEL=DEBUG \
          ${{ env.IMAGE_NAME }}:ci
          
    - name: Extract coverage report
      run: |
        # Create container and copy coverage report
        docker create --name test-container ${{ env.IMAGE_NAME }}:ci
        docker cp test-container:/app/coverage.xml ./coverage.xml || true
        docker rm test-container
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: dev
        push: false
        tags: ${{ env.IMAGE_NAME }}:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: prod
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Run security scan on production image
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v2
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Pull production image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}
        
    - name: Test production container
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Start container
        docker run -d \
          --name test-proxy \
          -p 11434:11434 \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          -e LOG_LEVEL=INFO \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}
          
        # Wait for container to be ready
        timeout 30 bash -c 'until curl -s http://localhost:11434/ready | grep -q "ready"; do sleep 1; done'
        
        # Test health endpoints
        curl -f http://localhost:11434/health
        curl -f http://localhost:11434/live
        curl -f http://localhost:11434/ready
        
        # Test API endpoints
        curl -f http://localhost:11434/api/tags
        
        # Stop container
        docker stop test-proxy
        docker rm test-proxy